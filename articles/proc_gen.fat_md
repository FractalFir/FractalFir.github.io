<metadata>
title = "Procedural Generics - Reflection and Code Generation taken too far"
id = "proc_gen"
category = "The Rust Compiler"
category = "hidden"
</metadata>
<markdown>
Doing weird stuff with compilers(and computers in general) is my hobby. I get a silly idea, and I try to see how far I can take it. This is how abominations, such as a [Java to C++] transpiler or 
[Rust to .NET compiler backend], came to be. While toying with different designs for a Rust/.NET interop layer, I accidentally stumbled across an interesting solution for reflection in Rust.  It has a
lot of drawbacks, and is not very pretty, but as I thought about it more and more, I realized just how much you could do with it. What I show in this article is an ugly duckling, that I hope one day becomes a
magnificent swan.

So, join me as I present this proposed feature, and show how it can be used to implement:
1. Simple reflection
2. Serialization for any type
3. A (simple) variadic generic function
4. DSLs(and regex) which compile to native code 
5. A "non-magic" version of `format_args!`

# A short introduction 

I would like to ask you a question - what even is reflection? This may seem obvious at first, but pointing out some of its properties will help me explain how "Procedural Generics" work. 


When we look at it from a very high level, abstract perspective:
```
Reflection is the ability of a program to examine itself.
```
There are a lot of different implementations, but all of them are just ways for code to analyze itself, and behave differently based on that information. In the case of Rust, we are mostly interested
in compiletime reflection. Rust is a very static language, and we want for it to behave in predictable ways, so restricting reflection to compile time seems like a good idea.


Another interesting property of reflection is the way it interacts with the type system. I would argue reflection is, almost always, an extension of generics.

Suppose we want there to be a reflection API, used to get the number of fields a type has. In order to get this information, we have to pass a type to this API. This is obvious: we can't ask about the properties 
of a type without specifying which type we are interested in.

So, in the wast majority of cases, we will have an API whose behaviour depends on a type parameter. This is suspiciously similar to generics.

> Generic programming is a style of computer programming in which algorithms are written in terms of data types to-be-specified-later
> that are then instantiated when needed for specific types 
> provided as parameters. 
- [Wikipedia](https://en.wikipedia.org/wiki/Generic_programming)

A lot of previously proposed APIs used **magic** generic functions and/or types. They were hardcoded, and their implementation was provided by the compiler. 

4
This is yet another interesting property of reflection: it requires the compiler(or a runtime) to procedurally generate some code, and/or data.


In .NET, all assemblies contain metadata tables, precisely describing the types and methods they contain. In Java, all class files contain information about types: The reflection APIs just allow you to get
that data. Even in the case of very dynamic languages, such as python, reflection involves a *something* generating code/data for your program to use.

In the case of Rust, there would have to be a part of the compiler which would procedurally generate types/code based on generic parameters. For a function which counts the fields of a type,
you would be likely to see something like this:

```rust
// This is a mock that only very vaguely resembles compiler code
fn impl_field_count(ty:Ty)->ConstValue{
    let adt = if let TyKind::Adt(def,_){
        def
    }else{
        // Non-ADT, no fields.
        return const_usize(0);
    };
    return const_usize(adt.all_fields().count());
}
```
For each part of the reflection API, you would have hardcoded("magic") functions. I don't know about you, but I don't like "magic".

# What are Procedural Generics

So, what is the solution I wanted to show you? Procedural Generics are a way to change the implementation of a function based on its generic parameters. 


</markdown>
